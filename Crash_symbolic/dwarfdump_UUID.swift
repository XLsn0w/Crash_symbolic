//
//  dwarfdump_UUID.swift
//  Crash_symbolic
//
//  Created by HL on 2018/7/11.
//  Copyright © 2018年 XL. All rights reserved.
//
/*
1）什么是符号表
符号表就是指在Xcode项目编译后，在编译生成的二进制文件.app的同级目录下生成的同名的.dSYM文件。.dSYM文件其实是一个目录，在子目录中包含了一个16进制的保存函数地址映射信息的中转文件，所有Debug的symbols都在这个文件中(包括文件名、函数名、行号等)，所以也称之为调试符号信息文件。一般地，Xcode项目每次编译后，都会生成一个新的.dSYM文件。因此，App的每一个发布版本，都需要备份一个对应的.dSYM文件，以便后续调试定位问题。

项目每一次编译后，.app和.dSYM成对出现，并且二者有相同的UUID值，以标识是同一次编译的结果。
UUID值可以使用dwarfdump —uuid来检查：

dwarfdump --uuid **.app.dSYM (**为你app)

 
 （2）符号表有什么用
 在Xcode开发调试App时，一旦遇到崩溃问题，开发者可以直接使用Xcode的调试器定位分析。
 但如果App发布上线，开发者不可能进行调试，只能通过分析系统记录的崩溃日志来定位问题，在这份崩溃日志文件中，会指出App出错的函数内存地址，而这些函数地址是可以在.dSYM文件中找到具体的文件名、函数名和行号信息的，这正是符号表的重要作用所在，也是为什么要进行符号表进行管理，并纪录这是哪个版本的符号表。
 
 Xcode的Organizer查看崩溃日志时，也自动根据本地存储的.dSYM文件进行了符号化的操作。并且，崩溃日志也有UUID信息，这个UUID和对应的.dSYM文件是一致的，即只有当三者的UUID一致时，才可以正确的把函数地址符号化。
 
 （3）符号表怎么生成
 Xcode项目默认的配置是会在编译后生成.dSYM，开发者无需额外修改配置。因为我也没有进行过ios开发经验，每个版本的符号表都是客户端的负责人给我的。这里省略。
 
 （4）符号表怎么用
 
 
 符号表的作用是把崩溃中的函数地址解析为函数名等信息。如果开发者能够获取到崩溃的函数地址信息，就可以利用符号表分析出具体的出错位置。
 
 Xcode提供了几个工具来帮助开发者执行函数地址符号化的操作。
 
 
 
 
 
 */
